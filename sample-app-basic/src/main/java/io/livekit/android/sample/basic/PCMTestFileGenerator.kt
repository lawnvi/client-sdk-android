package io.livekit.android.sample.basic

import android.media.AudioFormat
import java.io.File
import java.io.FileOutputStream
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.*

/**
 * ÁÆÄÂçïÁöÑPCMÊµãËØïÊñá‰ª∂ÁîüÊàêÂô®
 * Áî®‰∫éÁîüÊàê‰∏çÂêåÈ¢ëÁéáÁöÑÊ≠£Âº¶Ê≥¢Èü≥È¢ëÊñá‰ª∂ÔºåÊñπ‰æøÊµãËØïËá™ÂÆö‰πâÈü≥È¢ëËæìÂÖ•ÂäüËÉΩ
 */
object PCMTestFileGenerator {
    
    /**
     * ÁîüÊàêPCMÊµãËØïÊñá‰ª∂
     * 
     * @param outputFile ËæìÂá∫Êñá‰ª∂
     * @param durationSeconds Èü≥È¢ëÊó∂ÈïøÔºàÁßíÔºâ
     * @param frequency Ê≠£Âº¶Ê≥¢È¢ëÁéáÔºàHzÔºâÔºåÈªòËÆ§440HzÔºàAÈü≥Ôºâ
     * @param sampleRate ÈááÊ†∑ÁéáÔºåÈªòËÆ§44100Hz
     * @param channelCount Â£∞ÈÅìÊï∞ÔºåÈªòËÆ§2ÔºàÁ´ã‰ΩìÂ£∞Ôºâ
     * @param amplitude ÊåØÂπÖÔºå0.0-1.0ÔºåÈªòËÆ§0.3
     */
    fun generateSineWavePCM(
        outputFile: File,
        durationSeconds: Int = 5,  // ÊîπÁü≠‰∏Ä‰∫õ
        frequency: Double = 440.0,
        sampleRate: Int = 44100,
        channelCount: Int = 2,
        amplitude: Float = 0.3f
    ) {
        val totalSamples = sampleRate * durationSeconds
        val totalBytes = totalSamples * channelCount * 2 // 16-bit = 2 bytes per sample
        
        // Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
        outputFile.parentFile?.mkdirs()
        
        FileOutputStream(outputFile).use { fos ->
            val buffer = ByteBuffer.allocate(4096) // 4KB buffer
            buffer.order(ByteOrder.LITTLE_ENDIAN)
            
            var sampleIndex = 0
            
            while (sampleIndex < totalSamples) {
                buffer.clear()
                
                // Â°´ÂÖÖÁºìÂÜ≤Âå∫
                while (buffer.remaining() >= (channelCount * 2) && sampleIndex < totalSamples) {
                    // ËÆ°ÁÆóÊ≠£Âº¶Ê≥¢Ê†∑Êú¨ÂÄº
                    val time = sampleIndex.toDouble() / sampleRate
                    val sample = (sin(2.0 * PI * frequency * time) * amplitude * Short.MAX_VALUE).toInt()
                        .coerceIn(Short.MIN_VALUE.toInt(), Short.MAX_VALUE.toInt()).toShort()
                    
                    // ÂÜôÂÖ•ÊâÄÊúâÂ£∞ÈÅìÔºàÁ´ã‰ΩìÂ£∞ÊÉÖÂÜµ‰∏ãÂ∑¶Âè≥Â£∞ÈÅìÁõ∏ÂêåÔºâ
                    repeat(channelCount) {
                        buffer.putShort(sample)
                    }
                    
                    sampleIndex++
                }
                
                buffer.flip()
                fos.write(buffer.array(), 0, buffer.limit())
            }
        }
        
        println("‚úÖ PCMÊµãËØïÊñá‰ª∂Â∑≤ÁîüÊàê: ${outputFile.absolutePath}")
        println("üìä Êñá‰ª∂‰ø°ÊÅØ:")
        println("   - Êó∂Èïø: ${durationSeconds}Áßí")
        println("   - È¢ëÁéá: ${frequency}Hz")
        println("   - ÈááÊ†∑Áéá: ${sampleRate}Hz")
        println("   - Â£∞ÈÅìÊï∞: $channelCount")
        println("   - Êñá‰ª∂Â§ßÂ∞è: ${outputFile.length() / 1024}KB")
    }
    
    /**
     * ÁîüÊàêÂåÖÂê´Â§ö‰∏™È¢ëÁéáÁöÑÂ§çÂêàÈü≥È¢ë
     */
    fun generateMultiTonePCM(
        outputFile: File,
        durationSeconds: Int = 10,
        frequencies: List<Double> = listOf(440.0, 554.37, 659.25), // A, C#, E (AÂ§ßË∞É)
        sampleRate: Int = 44100,
        channelCount: Int = 2,
        amplitude: Float = 0.2f
    ) {
        val totalSamples = sampleRate * durationSeconds
        
        outputFile.parentFile?.mkdirs()
        
        FileOutputStream(outputFile).use { fos ->
            val buffer = ByteBuffer.allocate(4096)
            buffer.order(ByteOrder.LITTLE_ENDIAN)
            
            var sampleIndex = 0
            
            while (sampleIndex < totalSamples) {
                buffer.clear()
                
                while (buffer.remaining() >= (channelCount * 2) && sampleIndex < totalSamples) {
                    val time = sampleIndex.toDouble() / sampleRate
                    
                    // Ê∑∑ÂêàÂ§ö‰∏™È¢ëÁéá
                    var mixedSample = 0.0
                    frequencies.forEach { freq ->
                        mixedSample += sin(2.0 * PI * freq * time)
                    }
                    mixedSample /= frequencies.size // Âπ≥ÂùáÂåñÈò≤Ê≠¢ËøáËΩΩ
                    
                    val sample = (mixedSample * amplitude * Short.MAX_VALUE).toInt()
                        .coerceIn(Short.MIN_VALUE.toInt(), Short.MAX_VALUE.toInt()).toShort()
                    
                    repeat(channelCount) {
                        buffer.putShort(sample)
                    }
                    
                    sampleIndex++
                }
                
                buffer.flip()
                fos.write(buffer.array(), 0, buffer.limit())
            }
        }
        
        println("‚úÖ Â§öÈü≥Ë∞ÉPCMÊñá‰ª∂Â∑≤ÁîüÊàê: ${outputFile.absolutePath}")
        println("üìä ÂåÖÂê´È¢ëÁéá: ${frequencies.joinToString(", ")}Hz")
    }
    
    /**
     * ÁîüÊàêÈùôÈü≥PCMÊñá‰ª∂ÔºàÁî®‰∫éÊµãËØïÔºâ
     */
    fun generateSilencePCM(
        outputFile: File,
        durationSeconds: Int = 5,
        sampleRate: Int = 44100,
        channelCount: Int = 2
    ) {
        val totalBytes = sampleRate * durationSeconds * channelCount * 2
        
        outputFile.parentFile?.mkdirs()
        
        FileOutputStream(outputFile).use { fos ->
            val silenceBuffer = ByteArray(4096) // Â∑≤ÁªèÊòØÂÖ®Èõ∂
            var bytesWritten = 0
            
            while (bytesWritten < totalBytes) {
                val bytesToWrite = minOf(silenceBuffer.size, totalBytes - bytesWritten)
                fos.write(silenceBuffer, 0, bytesToWrite)
                bytesWritten += bytesToWrite
            }
        }
        
        println("‚úÖ ÈùôÈü≥PCMÊñá‰ª∂Â∑≤ÁîüÊàê: ${outputFile.absolutePath}")
    }
}